1.概念

    Shell 是一个用 C 语言编写的程序，它是用户使用 Linux 的桥梁。Shell 既是一种命令语言，又是一种程序设计语言。
    Shell 是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问操作系统内核的服务。
    Ken Thompson 的 sh 是第一种 Unix Shell，Windows Explorer 是一个典型的图形界面 Shell。

    ▄▄▄ 脚本语言：▄▄▄

        脚本语言是像剧本一样教计算机办某个事情的语言。
        比如你想让计算机执行复制某个文件的操作，如：cp ~/Desktop/*.txt ~/text
        你可以在文本编辑器写入上边的代码并且保存此文件，然后你通过执行这个文本文件来执行上面的代码，并不需要重复手动输入上边的代码。

        所以脚本其实就是短小的、用来让计算机自动化完成一系列工作的程序，这类程序可以用文本编辑器修改，不需要编译，通常是解释运行的。

2.Shell环境

    Shell 编程跟 java、php 编程一样，只要有一个能编写代码的文本编辑器和一个能解释执行的脚本解释器就可以了。
    Linux 的 Shell 种类众多，常见的有：
        ● Bourne Shell（/usr/bin/sh或/bin/sh）
        ● Bourne Again Shell（/bin/bash）
        ● C Shell（/usr/bin/csh）
        ● K Shell（/usr/bin/ksh）
        ● Shell for Root（/sbin/sh）
        ……

     Bash 在日常工作中被广泛使用。同时，Bash 也是大多数Linux 系统默认的 Shell。
     在一般情况下，人们并不区分 Bourne Shell 和 Bourne Again Shell，所以，像 #!/bin/sh，它同样也可以改为 #!/bin/bash。
     #! 告诉系统其后路径所指定的程序即是解释此脚本文件的 Shell 程序。

3.第一个Shell

    打开文本编辑器(可以使用 vi/vim 命令来创建文件)，新建一个文件 test.sh，扩展名为 sh（sh代表shell），扩展名并不影响脚本执行，
    见名知意就好，如果你用 php 写 shell 脚本，扩展名就用 php 好了。
    输入一些代码，第一行一般是这样：

        #!/bin/bash
        echo "Hello world!";

    ◆ #! 是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行，即使用哪一种 Shell。
    ◆ echo 命令用于向窗口输出文本。
    ★ Shell脚本是不需要知道特定的脚本后缀名的，比如上面内容，保存为test.sh 或者test.xxx 都是可以执行的

4.运行Shell的两种方式

    ① 作为可执行程序
        将上面的代码保存为 test.sh，并 cd 到相应目录：
        chmod +x ./test.sh  #使脚本具有执行权限
        ./test.sh  #执行脚本

        ■ Notice：
            一定要写成 ./test.sh，而不是 test.sh，运行其它二进制的程序也一样，直接写 test.sh，linux 系统会去 PATH 里寻找有没有叫 test.sh 的，
            而只有 /bin, /sbin, /usr/bin，/usr/sbin 等在 PATH 里，你的当前目录通常不在 PATH 里，
            所以写成 test.sh 是会找不到命令的，要用 ./test.sh 告诉系统说，就在当前目录找。

    ② 作为可执行程序
        这种运行方式是，直接运行解释器，其参数就是 shell 脚本的文件名，如：

            /bin/sh test.sh    // 比如这种，如果当前目录中有test.sh则可以直接执行，也可以写成绝对路径，如 /bin/sh /f/SH/test.sh
            /bin/php test.php

        这种方式运行的脚本，不需要在第一行指定解释器信息，写了也没用。
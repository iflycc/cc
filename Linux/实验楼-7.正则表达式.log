★ 语法：

    字符          描述
    \               转义符，如：'\n'匹配一个换行符，'\\'匹配'\'
    ^               匹配输入字符串开始的位置
    $               匹配输入字符串结束的位置
    {n}             n是个非负整数，表示匹配字符固定出现的n次。例：'o{2}'不能匹配'box'中的'o',但可以匹配'food'中的'oo'
    {n,}            n是个非负整数，至少匹配n次，'h{0,}'等价于'h*','h{1,}'等价于'h+'
    {n,m}           n,m非负整数，m>=n。表示至少匹配n次，最多匹配m次。例：'h{1,3}'将匹配'ahhhhhhb'中的前三个'h','h{0,1}'等价于'h?'
    *               匹配字符0次或者多次，例：'zr*'可匹配'z' 、'zr' 、'zrrr' 、'zrrrrrr...',等价于'zr{0,}'
    +               匹配字符至少一次，'a+'等价于'a{1,}'
    ?               匹配字符0次或者1次，?等价于{0,1}
    ?               当该字符紧跟在任何一个其他限制符（*,+,?，{n}，{n,}，{n,m}）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串“oooo”，“o+?”将匹配单个“o”，而“o+”将匹配所有“o”。
    .               匹配除了'\n'换行符之外的任何单个字符。若要所有字符，请用 '(.|\n)'
    (pattern)       匹配pattern并获取这一匹配的子字符串。该子字符串用于向后引用。要匹配圆括号字符，请使用“\(”或“\)”。
    x|y             匹配x或者y
    [xyz]           字符集合，匹配所包含的任意一个字符。连字符 - 如果出现在字符串中间表示字符范围描述；如果如果出现在首位则仅作为普通字符。
    [^xyz]          排除集合，匹配未列出的任意字符
    [a-z]           字符集合。
    [^a-z]          排除字符集合。


★ 优先级
    优先级为从上到下从左到右，依次降低：

    运算符	                    说明
        \	                        转义符
    (), (?:), (?=), []	            括号和中括号
    *、+、?、{n}、{n,}、{n,m}	        限定符
    ^、$、\                          任何元字符	定位点和序列
    ｜	　                           选择

1.grep
    ◆ grep命令用于打印输出文本中的匹配的模式串，它使用正则表达式作为模式匹配的条件。grep支持三种正则表达式引擎，分别用三个参数指定：

    参数      说明
    -E          POSIX扩展正则表达式，ERE
    -G          POSIX基本正则表达式，BRE
    -P          Perl正则表达式，PCRE

    ● grep常用参数
        -b      将二进制文件作为文本来进行匹配
        -c      统计以模式匹配的数目
        -i      忽略大小写
        -n      显示匹配字符所在的行号
        -v      反选模式，输出不匹配行的内容
        -r      递归查找
        -A n    n为正整数，表示after的意思，除了列出匹配行之外，还列出了后面的n行
        -B n    n为正整数，表示before的一次，除了列出匹配行之外，还列出前面的n行
        --color=auto   将输出的匹配项设置为自动颜色显示

    ☆ 实例：
        # cat > test.txt <<EOF ... EOF

        $ cat test.txt
            baidubaidubaidu
            www.baidu.com
            C
            linux
            date_struct
            python
            MySql
            shell

        $ grep -c 'baidu' text.txt  // 匹配test.txt里面包含匹配字符串'baidu'的行数，并列出匹配的行的个数，注意即使是'baidubaidubaidu...'只要在一行也只会算一次
            2

        $ grep -n -i 'c' test.txt   // 匹配test.txt里面的包含'c'字符（-i表示不区分大小写）并列出行号
            2:www.baidu.com
            3:C
            5:date_struct

        $ grep -v 'shell' test.txt  // 反选匹配，列出全部不包含'shell'字符串的行
            baidu
            www.baidu.com
            C
            linux
            date_struct
            python
            MySql

        $ grep 'baidu' test.txt     // 匹配包含'baidu'字符串的行
            baidubaidubaidu
            www.baidu.com

        $ grep '^www' test.txt      // 匹配以'www'开头的字符串的行
            www.baidu.com

        $ grep 'l$' test.txt        // 匹配以'l'字符串结尾的行
            MySql
            shell

        $ echo 'zero\nzo\nzoo' | grep 'z.*o'    // 将匹配以'z'开头以'o'结尾的所有字符串
            zero
            zo
            zoo

        $ echo 'zero\nzo\nzoo' | grep 'z.o'     // 将匹配以'z'开头以'o'结尾，中间包含一个任意字符的字符串
            zo

        $ echo 'zero\nzo\nzoo' | grep 'zo*'     // 将匹配以'z'开头,以任意多个'o'结尾的字符串


        ◇ 选择
        # grep默认是区分大小写的，这里将匹配所有的小写字母
        $ echo '1234\nabcd' | grep '[a-z]'
        # 将匹配所有的数字
        $ echo '1234\nabcd' | grep '[0-9]'
        # 将匹配所有的数字
        $ echo '1234\nabcd' | grep '[[:digit:]]'
        # 将匹配所有的小写字母
        $ echo '1234\nabcd' | grep '[[:lower:]]'
        # 将匹配所有的大写字母
        $ echo '1234\nabcd' | grep '[[:upper:]]'
        # 将匹配所有的字母和数字，包括0-9,a-z,A-Z
        $ echo '1234\nabcd' | grep '[[:alnum:]]'
        # 将匹配所有的字母
        $ echo '1234\nabcd' | grep '[[:alpha:]]'

        特殊符号	    说明
        [:alnum:]	代表英文大小写字母及数字，亦即 0-9, A-Z, a-z
        [:alpha:]	代表任何英文大小写字母，亦即 A-Z, a-z
        [:blank:]	代表空白键与 [Tab] 按键两者
        [:cntrl:]	代表键盘上面的控制按键，亦即包括 CR, LF, Tab, Del.. 等等
        [:digit:]	代表数字而已，亦即 0-9
        [:graph:]	除了空白字节 (空白键与 [Tab] 按键) 外的其他所有按键
        [:lower:]	代表小写字母，亦即 a-z
        [:print:]	代表任何可以被列印出来的字符
        [:punct:]	代表标点符号 (punctuation symbol)，亦即：" ' ? ! ; : # $...
        [:upper:]	代表大写字母，亦即 A-Z
        [:space:]	任何会产生空白的字符，包括空白键, [Tab], CR 等等
        [:xdigit:]	代表 16 进位的数字类型，因此包括： 0-9, A-F, a-f 的数字与字节


    ★ 使用扩展正则表达式，ERE。  要通过grep使用扩展正则表达式需要加上 -E 参数，或使用egrep。
        ● 数量
            # 只匹配"zo"
            $ echo 'zero\nzo\nzoo' | grep -E 'zo{1}'
            # 匹配以"zo"开头的所有单词
            $ echo 'zero\nzo\nzoo' | grep -E 'zo{1,}'

        注意：推荐掌握{n,m}即可，+,?,*，这几个不太直观，且容易弄混淆。

       ● 选择
            # 匹配"www.shiyanlou.com"和"www.google.com"
            $ echo 'www.shiyanlou.com\nwww.baidu.com\nwww.google.com' | grep -E 'www\.(shiyanlou|google)\.com'


2.sed
   sed工具在 man 手册里面的全名为"sed - stream editor for filtering and transforming text "，意即，用于过滤和转换文本的流编辑器。
   在 Linux/UNIX 的世界里敢称为编辑器的工具，大都非等闲之辈，比如前面的"vi/vim(编辑器之神)","emacs(神的编辑器)","gedit"这些个编辑器。
   sed与上述的最大不同之处在于它是一个非交互式的编辑器。

   参数	    说明
   -n	    安静模式，只打印受影响的行，默认打印输入数据的全部内容
   -e	    用于在脚本中添加多个执行命令一次执行，在命令行中执行多个命令通常不需要加该参数
   -f       filename	指定执行filename文件中的命令
   -r	    使用扩展正则表达式，默认为标准正则表达式
   -i	    将直接修改输入文件内容，而不是打印到标准输出设备

    其中n1,n2表示输入内容的行号，它们之间为,逗号则表示从n1到n2行，如果为～波浪号则表示从n1开始以step为步进的所有行；command为执行动作，下面为一些常用动作指令：

    命令	    说明
    s	    行内替换
    c	    整行替换
    a	    插入到指定行的后面
    i	    插入到指定行的前面
    p	    打印指定行，通常与-n参数配合使用
    d	    删除指定行


    ☆ 实例：
        # 打印文件test.txt的2至5行
        $ nl test.txt | sed -n '2,5p'

        # 打印奇数行
        $ nl test.txt | sed -n '1~2p'


3.awk











    





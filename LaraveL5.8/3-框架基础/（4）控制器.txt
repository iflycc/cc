1.定义控制器
	◆ 命令：php artisan make:controller XxxController
	◆ 生成UserController
		● php artisan make:controller UserController
			会在 app/Http/Controllers中生成UserController
			（所有的控制器应该（但不必须）要继承App\Http\Controllers\Controller基类，基类可提供很多便捷方法供子类使用，比如：middleware等）
		● 为改控制器添加一个show方法：
			<?php 
				namespace App\Http\Controllers;
				use App\User; //具体看模型脚本放在上面位置而定
				user Illuminate\Http\Request;
				
				Class UserController extends Controller
				{
					public function show($id)
					{
						return view('user.profile',['user' => User::findOrFail($id)]);
					}
				}
		● 定义访问路由：Route::get("user/{id}","UserController@show");
		● 定义视图文件：
			resources/views/user/profile.blade.php 编辑：{{ $user }}，打印数据库中的users表的id为对应值的模型实例。

2.单一动作控制器
	◆ 如果你想要定义一个只处理一个动作的控制器，可以在这个控制器中定义__invoke方法：
		<?php
			namespace App\Http\Controllers;
			use App\Models\User;
			
			class ShowProfile extends Controllers
			{
				/**
				 * 当PHP中尝试以调用函数的方式调用一个对象时，__invoke()方法会被调用。
				 */
				public function __invoke()
				{
					
				}
			}
			
	◆ 注册路由（不指定方法）: Route::get('user/{id}',"ShowProfile");  //注：不可以先注册路由再使用命令行生成控制器，否则会报错
	◆ 生成控制器： php artisan make:controller ShowProfile --invokable	
	
3.控制器中间件
	◆ 中间件分配给路由： Route::get(...)->middleware('auth');
	◆ 将中间件放在控制器的构造函数中更加方便，构造的$this->middleware()方法（继承自基类控制器），这样中间件对所有的控制器方法都生效：
		● public function __contruct()
		  {
			$this->middleware('token');
		  }
		● $this->middleware('auth')->only('show'); //只对改方法生效
		● $this->middleware('auth')->only(['show','index']); //数组形式
		● $this->middleware('auth')->except('show'); //对该方法以外的方法生效
		● $this->middleware('auth')->except(['show','index']); //数组形式
		● 闭包中间件，无需定义完整的中间件类：
			$this->middleware(function($request,$next){
				// ...
				
				return $next($request);
			});
		● 实例：
			class UserController extends Controller
			{
				public function __contruct
				{
					$this->middleware('token')->only('show');
					$this->middleware('auth')->except('index');
					// 这样当我们访问 http://blog.test/user/1 会抛出 404 异常，只有当访问 http://blog.test/user/1?id=1 时才能正常展示。
					$this->middleware(function($request,$next){
						if(!is_number($this->request->input('id'))){
							throw new NotFoundHttpException();
						}
						return $next($request);
					});
				}
			}

4.资源控制器
	◆ 命令： php artisan make:controller XxxController --resource 
	◆ 示例：
		● php artisan make:controller PostController --resource 
		● 注册资源路由：
			Route::resource('posts','PostController');
			Route::resource('posts','PostController',['only'=>[...],'except'=>[...]]);
			一次性注册多个资源路由：
			Route::resources([
				'phots' => "PhotoController",
				'posts' => "PostController",
			]);
		● 资源控制器处理的动作
			请求方式	URL路径				控制器方法		路由名称
			GET			/posts				index			posts.index
			Get			/posts/create		create			posts.create
			Post		/posts				store			posts.store
			Get			/posts/{id}			show			posts.show
			Get			/post/{id}/edit		edit			posts.edit
			Put/Patch	/posts/{id}			update			posts.update
			Delete		/posts/{id}			destroy			posts.destroy
	◆ 伪造表单方法
		由于HTML不支持发起PUT、PATCH、DELETE请求，需要添加一个隐藏的_method字段来伪造HTTP请求方式，Blade指令@method可实现：
		<form action="/foo/bar" method="POST">
			@method('PUT')
		</form>
	◆ 	API 资源路由
		声明被API消费的资源路由时，需要排除展示HTML模板的路由（create、edit），Laravel提供了apiResource方法自动排除这两个路由：
		● Route::apiResource('post','PostController');
		  Route::apiResource([
			'posts' => 'PostController',
			'photos' => 'PhotoController',
		  ]);
		● 生成不包含 create、edit的API资源路由控制器：
			php artisan make:controller API/PostController --api
		● 命名资源路由 
			默认情况下，所有的资源控制器动作都有一个路由名称，可以通过传入names数组来覆盖这些默认的名称：
				Route::resource('posts','PhotoController',[
					'names' => [
						'create' => 'post.build',
					]
				]);
		● 命名资源路由参数
			默认情况下Route::resource将会基于资源名称的单数格式为资源路由创建路由参数，你可以通过在选项数组中传递parameters来覆盖这一默认设置。parameters是资源名称和参数名称的关联数组：
			Route::resource('users','AdminUserController',[
				'parameters' =>[
					'users' => 'admin_user'
				]
			]);
			以上代码会为资源的show路由生成URL：/user/{admin_user}
	◆ 依赖注入
		use Illuminate\Http\Request;
		public function foo(Request $request){...}
	◆ 路由缓存
		★ 路由缓存不会作用于基本闭包的路由。要使用路由缓存，必须将闭包路由转化为控制器路由。
		
		● 如果应用路由完全基于控制强路由，可以使用Laravel的路由缓存，使用路由缓存将极大降低注册所有应用所花费的时间开销，甚至可达到100倍！命令如下：
			php atrisan route:cache 
		● 运行完成后，每次请求都会从缓存中读取路由，当添加的了新的路由需要重新生成路由缓存。因此，只有在项目部署阶段才需要运行php artisan route:cache，如果想移除路由缓存则：
			php artisan route:clear
			
			
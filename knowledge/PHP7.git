1.PHP 标量类型与返回值类型声明

    PHP 7 增加了标量类型声明的特性，标量类型声明有两种模式:
        ◆ 强制模式 (默认)
        ◆ 严格模式
    标量类型声明语法格式：
       declare(strict_types=0);  //强制模式
       declare(strict_types=1);  //严格模式

    代码中通过指定 strict_types的值（1或者0），1表示严格类型校验模式，作用于函数调用和返回语句；0表示弱类型校验模式。
    可以使用的类型参数有：
        ● int
        ● float
        ● bool
        ● string
        ● interfaces
        ● array
        ● callable

    〓 实例：
    //:int 可以是 :string 、:bool 、:float....
     function sum(array $ints):int
        {
            return array_sum($ints);
        }

        $array = [2, '3', 4.1];
        declare(strict_types=0);
        sum($array); //返回：int 9 ，在强制模式下，实际上是float 9.1 强制转换为int 9 的

        declare(strict_types=1);
        sum($array); //返回：报错。 在严格模式下，float 9.1 不能转换为 int 9 ，所以报错了。
▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅

2.NULL 合并运算符

    PHP 7 新增加的 NULL 合并运算符（??）是用于执行isset()检测的三元运算的快捷方式。
    NULL 合并运算符会判断变量是否存在且值不为NULL，如果是，它就会返回自身的值，否则返回它的第二个操作数。
    以前我们这样写三元运算符：
        $site = isset($_GET['site']) ? $_GET['site'] : '菜鸟教程';

    现在我们可以直接这样写：
        $site = $_GET['site'] ?? '菜鸟教程';
▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅

3.PHP太空船比较运算符（组合比较符）

    用于比较两个表达式 $a 和 $b ，如果 $a 小于、等于、大于 $b时，分别返回 -1、0、1。

    〓 实例：
        //整形比较
        print(1<=>1);  //  0
        print(1<=>2);  // -1
        print(2<=>1);  //  1

        //浮点型比较
        print(1.5<=>1.5);  //  0
        print(1.5<=>2.5);  // -1
        print(2.5<=>1.5);  //  1

        //字符串比较（字符串比较 z>x>y>w>u......c>b>a）
         print(a<=>a);  //  0
         print(a<=>b);  // -1
         print(b<=>a);  //  1
▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅

4.PHP 7可以常量可以定义数组

    在 PHP 5.6 中仅能通过 const 定义常量数组，PHP 7 可以通过 define() 来定义。

    〓 实例：
        define("site",array("taobao","tencent","google"));
        echo site[2]; //google
▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅

5.匿名类

    PHP 7 支持通过 new class 来实例化一个匿名类，这可以用来替代一些"用后即焚"的完整类定义。

    〓 实例：
        interface Logger {
            public function log(string $msg);
        }

        class Application {
            public $a = 123;
            public $b = 456;
            private $logger;

            public function getLogger(): Logger {
                return $this->logger;
            }
            /**
             * @param Logger $logger 声明这个是参数是接口interface，类似于 int $num, array $array...
             */
            public function setLogger(Logger $logger) {
                $this->logger = $logger;
            }
        }

        $app = new Application;
        // 使用 new class 创建匿名类
        $app->setLogger(new class implements Logger { //把整个匿名类当做一个参数传递到Application::setLogger
            public function log(string $msg) {
                print($msg);
            }
        });

        $app->getLogger()->log("我的第一条日志");

        /**
         * @param Application $application
         */
        function abc(Application $application){ //声明函数参数为Object对象
            echo $application->a,"<br />";
            echo $application->b,"<br />";
        }
        abc($app); //打印123  456

▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅

6.PHP Closure::call()
    PHP 7 的 Closure::call() 有着更好的性能，将一个闭包函数动态绑定到一个新的对象实例并调用执行该函数。

    〓 实例：
        class A {
            private $x = 1;
        }

        // PHP 7 之前版本定义闭包函数代码
        $getXCB = function() {
            return $this->x;
        };

        // 闭包函数绑定到类 A 上
        $getX = $getXCB->bindTo(new A, 'A');

        echo $getX();
        print(PHP_EOL);

        // PHP 7+ 代码
        $getX = function() {
            return $this->x;
        };
        echo $getX->call(new A);


    〓 实例：
        /**
         *●●●●●●● Closure类为闭包类，PHP中闭包都是Closure的实例 ●●●●●●●
         * 复制一个闭包，绑定指定的$this对象和类作用域。
         * bindTo()  -> $newscope默认为‘Static'表示不改变，还是之前的作用域。
         */
        class Animal {
            private static $cat = "cat";
            private $dog = "dog";
            public $pig = "pig";
        }

        /*
         * 获取Animal类静态私有成员属性
         */
        $cat = static function() {
            return Animal::$cat;
        };

        /*
         * 获取Animal实例私有成员属性
         */
        $dog = function() {
            return $this->dog;
        };

        /*
         * 获取Animal实例公有成员属性
         */
        $pig = function() {
            return $this->pig;
        };

        $bindCat1 = Closure::bind($cat, null, new Animal());// 给闭包绑定了Animal实例的作用域，但未给闭包绑定$this对象
        $bindCat2 = Closure::bind($cat, null, "Animal");// 给闭包绑定了Animal实例的作用域，但未给闭包绑定$this对象 (同上)
        $bindDog  = Closure::bind($dog, new Animal(), 'Animal');// 给闭包绑定了Animal类的作用域，同时将Animal实例对象作为$this对象绑定给闭包
        $bindPig  = Closure::bind($pig, new Animal());// 将Animal实例对象作为$this对象绑定给闭包,保留闭包原有作用域
        echo $bindCat1(),'<br>';// 根据绑定规则，允许闭包通过作用域限定操作符获取Animal类静态私有成员属性
        echo $bindCat2(),'<br>';// 根据绑定规则，允许闭包通过作用域限定操作符获取Animal类静态私有成员属性
        echo $bindDog(),'<br>';// 根据绑定规则，允许闭包通过绑定的$this对象(Animal实例对象)获取Animal实例私有成员属性
        echo $bindPig(),'<br>';// 根据绑定规则，允许闭包通过绑定的$this对象获取Animal实例公有成员属性

▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅

7. PHP 过滤 unserialize()
    PHP 7 增加了可以为 unserialize() 提供过滤的特性，可以防止非法数据进行代码注入，提供了更安全的反序列化数据。

    〓 实例：
        class MyClass1 {
            public $obj1prop;
        }
        class MyClass2 {
            public $obj2prop;
        }

        $obj1 = new MyClass1();
        $obj1->obj1prop = 1;
        $obj2 = new MyClass2();
        $obj2->obj2prop = 2;

        $serializedObj1 = serialize($obj1);
        $serializedObj2 = serialize($obj2);

        // 默认行为是接收所有类
        // 第二个参数可以忽略
        // 如果 allowed_classes 设置为 false, unserialize 会将所有对象转换为 __PHP_Incomplete_Class 对象
        $data = unserialize($serializedObj1 , ["allowed_classes" => true]);

        // 转换所有对象到 __PHP_Incomplete_Class 对象，除了 MyClass1 和 MyClass2
        $data2 = unserialize($serializedObj2 , ["allowed_classes" => ["MyClass1", "MyClass2"]]);

        print($data->obj1prop); // 1
        print(PHP_EOL);
        print($data2->obj2prop); // 2

▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅

8.IntlChar()
    PHP 7 通过 intl 扩展来支持国际化 (i18n) 和本地化 (l10n) 。此扩展仅仅是对 ICU 库的基础包装，并提供了和 ICU 库类似的方法和特性。
    PHP 7 通过新的 IntlChar 类暴露出 ICU 中的 Unicode 字符特性。这个类自身定义了许多静态方法用于操作多字符集的 unicode 字符。

    〓 实例：
        printf('%x', IntlChar::CODEPOINT_MAX);
        echo IntlChar::charName('@');
        var_dump(IntlChar::ispunct('!'));

        以上程序执行输出结果为：

        10ffff
        COMMERCIAL AT
        bool(true)

▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅

9.PHP CSPRNG
    CSPRNG（Cryptographically Secure Pseudo-Random Number Generator，伪随机数产生器）。
    PHP 7 通过引入几个 CSPRNG 函数提供一种简单的机制来生成密码学上强壮的随机数。

        ◆ random_bytes() - 加密生存被保护的伪随机字符串。
        ◆ random_int() - 加密生存被保护的伪随机整数。

    ██ random_bytes()
        ◆ 语法格式
            string random_bytes ( int $length )
        ◆ 参数
            length - 随机字符串返回的字节数。
        ◆ 返回值
            返回一个字符串，接受一个int型入参代表返回结果的字节数。

        〓 实例：
            $bytes = random_bytes(5);
            print(bin2hex($bytes));     // 必须bin2hex() 2进制转换为16进制，$bytes的乱码

        ◆ 以上程序执行输出结果为：
            6f36d48a29

    ██ random_int()
        ◆ 语法格式
            int random_int ( int $min , int $max )
        ◆ 参数
            min - 返回的最小值，必须是大于或等于 PHP_INT_MIN 。
            max - 返回的最大值，必须是小于或等于 PHP_INT_MAX 。

        ◆ 返回值
            返回一个指定范围内的int型数字。

        ◆ 实例
            print(random_int(100, 999));
            print(PHP_EOL);
            print(random_int(-1000, 0));

        ◆ 以上程序执行输出结果为：

            723
            -64

▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅

10.PHP 7异常

    PHP 7 异常用于向下兼容及增强旧的assert()函数。它能在生产环境中实现零成本的断言，并且提供抛出自定义异常及错误的能力。
    老版本的API出于兼容目的将继续被维护，assert()现在是一个语言结构，它允许第一个参数是一个表达式，而不仅仅是一个待计算的 string或一个待测试的boolean。


▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅

11.PHP 7 use语句

    PHP 7 可以使用一个 use 从同一个 namespace 中导入类、函数和常量：

    〓 实例：
        // PHP 7 之前版本需要使用多次 use
        use some\namespace\ClassA;
        use some\namespace\ClassB;
        use some\namespace\ClassC as C;

        use function some\namespace\fn_a;
        use function some\namespace\fn_b;
        use function some\namespace\fn_c;

        use const some\namespace\ConstA;
        use const some\namespace\ConstB;
        use const some\namespace\ConstC;

        // PHP 7+ 之后版本可以使用一个 use 导入同一个 namespace 的类
        use some\namespace\{ClassA, ClassB, ClassC as C};
        use function some\namespace\{fn_a, fn_b, fn_c};
        use const some\namespace\{ConstA, ConstB, ConstC};

▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅

12.PHP 7 use语句

    〓 实例：
        class MathOperations
        {
            protected $n = 10;

            // 求余数运算，除数为 0，抛出异常
            public function doOperation(): string
        //    public function doOperation()
            {
                try {
                    var_dump("******");
                    $value = $this->n % 0; // 这一步出错，直接抛出异常

                    var_dump("++++");
                    return $value;
                } catch (DivisionByZeroError $e) {

                    var_dump(">>>>>");
                    var_dump($e->getMessage());
                    return $e->getMessage();
                }
            }
        }

        $mathOperationsObj = new MathOperations();
        print($mathOperationsObj->doOperation());

        以上程序执行输出结果为：
            Modulo by zero

▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅

13.PHP intdiv() 函数

    PHP 7 新增加了 intdiv() 函数，接收两个参数，返回值为第一个参数除于第二个参数的值并取整。

    〓 实例：
            echo intdiv(9,3),PHP_EOL;   // 3
            echo intdiv(10,3),PHP_EOL;  // 3
            echo intdiv(5,10),PHP_EOL;  // 0

▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅

14.PHP Session 选项

   PHP 7 session_start()函数可以接收一个数组作为参数，可以覆盖php.ini中session的配置项。
   这个特性也引入了一个新的php.ini设置（session.lazy_write）,默认情况下设置为 true，意味着session数据只在发生变化时才写入。
   除了常规的会话配置指示项， 还可以在此数组中包含 read_and_close 选项。如果将此选项的值设置为 TRUE， 那么会话文件会在读取完毕之后马上关闭， 因此，可以在会话数据没有变动的时候，避免不必要的文件锁。

   〓 实例：
        session_start(&#91;
           'cache_limiter' => 'private',
           'read_and_close' => true,
        ]);

▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅

15.PHP 7 废弃特性

    PHP4 风格的构造函数
    在 PHP4 中类中的函数可以与类名同名，这一特性在 PHP7 中被废弃，同时会发出一个 E_DEPRECATED 错误。当方法名与类名相同，且类不在命名空间中，同时PHP5的构造函数（__construct）不存在时，会产生一个 E_DEPRECATED 错误。

    〓 实例
        class A {
           function A() {
              print('Style Constructor');
           }
        }
    以上程序执行输出结果为：
        Deprecated: Methods with the same name as their class will not be constructors in a future version of PHP; A has a deprecated constructor in...

    以静态的方式调用非静态方法，不再支持：
    〓 实例
        class A {
           function b() {
              print('Non-static call');
           }
        }
        A::b();

    以上程序执行输出结果为：

        Deprecated: Non-static method A::b() should not be called statically in...
        Non-static call

    password_hash() 随机因子选项
        函数原 salt 量不再需要由开发者提供了。函数内部默认带有 salt 能力，无需开发者提供 salt 值。

    capture_session_meta SSL 上下文选项
        废弃了 "capture_session_meta" SSL 上下文选项。 在流资源上活动的加密相关的元数据可以通过 stream_get_meta_data() 的返回值访问。

▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅

16.PHP 7 移除的扩展

    PHP 7+ 版本移除了以下扩展：

        ◆ ereg
        ◆ mssql
        ◆ mysql
        ◆ sybase_ct

▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅

17.PHP 7 移除的SAPI （Server Application Programming Interface 服务器端应用编程端口）

    PHP 7+ 版本移除了以下 SAPI：
        ◆ aolserver
        ◆ apache
        ◆ apache_hooks
        ◆ apache2filter
        ◆ caudium
        ◆ continuity
        ◆ isapi
        ◆ milter
        ◆ nsapi
        ◆ phttpd
        ◆ pi3web
        ◆ roxen
        ◆ thttpd
        ◆ tux
        ◆ webjames

SAPI:Server Application Programming Interface 服务器端应用编程端口。它就是PHP与其它应用交互的接口，PHP脚本要执行有很多种方式，通过Web服务器，或者直接在命令行下，也可以嵌入在其他程序中。
     SAPI提供了一个和外部通信的接口，常见的SAPI有：cgi 、fast-cgi、cli、isapi、apache 模块的 DLL。

◆ CGI
    CGI即通用网关接口(Common Gateway Interface)，它是一段程序，通俗的讲CGI就象是一座桥，把网页和WEB服务器中的执行程序连接起来，
    它把HTML接收的指令传递给服务器的执 行程序，再把服务器执行程序的结果返还给HTML页。CGI 的跨平台性能极佳，几乎可以在任何操作系统上实现。
    CGI方式在遇到连接请求（用户 请求）先要创建cgi的子进程，激活一个CGI进程，然后处理请求，处理完后结束这个子进程。这就是fork-and-execute模式。
    所以用cgi方式的服务器有多少连接请求就会有多少cgi子进程，子进程反复加载是cgi性能低下的主要原因。都会当用户请求数量非常多时，会大量挤占系统的资源如内存，CPU时间等，造成效能低下。

◆ FastCGI
    fast-cgi 是cgi的升级版本，FastCGI像是一个常驻(long-live)型的CGI，它可以一直执行着，只要激活后，不会每次都要花费时间去fork一次。
    PHP使用PHP-FPM(FastCGI Process Manager)，全称PHP FastCGI进程管理器进行管理。

    FastCGI的工作原理:
        1.Web Server启动时载入FastCGI进程管理器(IIS ISAPI或Apache Module)
        2.FastCGI进程管理器自身初始化，启动多个CGI解释器进程(可见多个php-cgi)并等待来自Web Server的连接。
        3.当客户端请求到达Web Server时，FastCGI进程管理器选择并连接到一个CGI解释器。Web server将CGI环境变量和标准输入发送到FastCGI子进程php-cgi。
        4.FastCGI子进程完成处理后将标准输出和错误信息从同一连接返回Web Server。当FastCGI子进程关闭连接时，请求便告处理完成。
          FastCGI子进程接着等待并处理来自FastCGI进程管理器(运行在Web Server中)的下一个连接。 在CGI模式中，php-cgi在此便退出了。

    在上述情况中，你可以想象CGI通常有多慢。每一个Web 请求PHP都必须重新解析php.ini、重新载入全部扩展并重初始化全部数据结构。
    使用FastCGI，所有这些都只在进程启动时发生一次。一个额外的好处是，持续数据库连接(Persistent database connection)可以工作。

◆ APACHE2HANDLER
    PHP作为Apache模块，Apache服务器在系统启动后，预先生成多个进程副本驻留在内存中，一旦有请求出 现，就立即使用这些空余的子进程进行处理，
    这样就不存在生成子进程造成的延迟了。这些服务器副本在处理完一次HTTP请求之后并不立即退出，而是停留在计 算机中等待下次请求。对于客户浏览器的请求反应更快，性能较高。

◆ apache模块的DLL：
    该运行模式是我们以前在windows环境下使用apache服务器经常使用的，而在模块化(DLL)中，PHP是与Web服务器一起启动并运行的。（是apache在CGI的基础上进行的一种扩展，加快PHP的运行效率）。

◆ ISAPI:
I   SAPI即Internet Server Application Program Interface，是微软提供的一套面向Internet服务的API接口.一个ISAPI的DLL，
    可以在被用户请求激活后长驻内存，等待用户的另一个请求，还可以在一个DLL里设置多个用户请求处理函数，此外，ISAPI的DLL应用程序和WWW服务器处于同一个进程中，效率要显著高于CGI。

◆ cli:
    cli是php的命令行运行模式，大家经常会使用它，但是可能并没有注意到（例如：我们在linux下经常使用 “php -m”查找PHP安装了那些扩展就是PHP命令行运行模式；

    在windows下使用cli模式从命令行进入www目录，然后运行：
        >>>>>   php test.php  <<<<<
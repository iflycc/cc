▅ 定义：
    是一组SQL语句集合，功能强大，SQL语句需要先编译然后执行，而存储过程（Stored Procedure）是经编译后存储在数据库中，用户通过指定的存储名 + 参数来调用执行。
    存储过程是可编译的函数，在数据库中创建并保存，可以由SQL语句和控制结构组成。

▅ 优点：
    （1）增强SQL语句的功能和灵活性：存储过程可以用控制语句编写，灵活性强，可完成负责的判断和运算。
    （2）标准组件式编程：存储过程被创建后，可以再程序中多次调用，不必重复写SQL语句，可以通过DBA修改存储过程，而不用修改应用程序代码。
    （3）执行速度快：预编译，首次执行优化器会对其调优并给出最终被存储在系统表中的执行计划，而批处理的Transaction-SQL每次运行都要进行编译和优化。
    （4）减少网络流量：只传递SQL语句。
    （5）安全：通过执行某一存储过程的权限进行限制，能够实现相应的访问权限控制，避免了非授权用户对数据的访问，保证了数据的安全。

▅ 语法
    create procedure 过程名([IN | OUT | INOUT] 参数名 数据类型...[ , IN | OUT | INOUT] 参数名 数据类型...]) [特性 ...] 过程体;

    DELIMITER //
        create procedure myPrc(OUT s int)
            BEGIN
                select count(*) INTO s FROM students;
            END
            //
    DELIMITER;

▅ 分隔符
    MYSQL默认以‘;’为分隔符，如果没有声明分隔符，则编译器会把存储过程当成SQL语句处理，编译会出错，所以要实现用 “ DELIMITER // ” 申明当前段分隔符，
    让编译器吧把个“//”之间的内容当做存储过程的代码，不会执行这些代码。

▅ 参数
    存储过程根据需要会有输入、输出、输入输出参数，如果有多个参数用‘,’分隔。三种参数类型：IN、OUT、INOUT。
    ▶ IN：参数的值必须在调用存储过程时指定，在存储过程中修改改参数的值不能被返回，为默认值。
    ▶ OUT:参数的值可在存储过程内部被改变，并返回。
    ▶ INOUT：调用时指定，并且可被改变会返回。

▅ 过程体
    过程体的开始于结束使用BEGIN和END进行标识。

★★    DELIMITER ; #恢复mysql分号定界符    ★★

▅ 示例：
    ▶ IN参数例子
    ----------------------------------------------->>>>>>>
        DELIMITER //
            create procedure demo_in(IN p_in int)
                BEGIN
                    select p_in;
                    set p_in=2;
                    select p_in;
                END
                //
    <<<<<<<-----------------------------------------------

        # 调用
        SET @p_in=1;
        CALL demo_in(@p_in);
        select @p_in;  # @p_in还是1

    ▶ OUT参数例子 ： MySQL存储过程"out"参数：从存储过程内部传值给调用者。在存储过程内部，该参数初始值为 null，无论调用者是否给存储过程参数设置值。
    ----------------------------------------------->>>>>>>
           DELIMITER //
               create procedure demo_out(OUT p_in int)
                   BEGIN
                       select p_in;  # null ，无论传递参数多少，初始值都是null
                       set p_in=2;
                       select p_in;
                   END
                   //
    <<<<<<<-----------------------------------------------

        # 调用
        SET @p_out = 1;
        CALL demo_out(@p_out);
        select @p_out; # 值为2

    ▶ INOUT参数例子
    ----------------------------------------------->>>>>>>
         DELIMITER //
            create procedure demo_inout(INOUT p_inout int)
                BEGIN
                    select p_inout;  # 为传递的初始值
                    set p_in=2;
                    select p_in;
                END
                //
    <<<<<<<-----------------------------------------------

        # 调用
        SET @p_inout = 1;
        call demo_inout(@p_inout);
        select @p_inout; # 值为2

▅ 存储过程的查询
    #查询存储过程
    SELECT name FROM mysql.proc WHERE db='数据库名';
    SELECT routine_name FROM information_schema.routines WHERE routine_schema='数据库名';
    SHOW PROCEDURE STATUS WHERE db='数据库名';

    #查看存储过程详细信息
    SHOW CREATE PROCEDURE 数据库.存储过程名;

▅ 存储过程的删除
    DROP PROCEDURE [过程1[,过程2…]];


▅  ▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂ MYSQL存储过程的控制语句 ▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂

★ if-then-else-end if ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
    ● 格式
        if ... then
        [
            else
                ...
        ]
        end if;

    # 条件控制语句
        drop procedure if exists my_pro3;
        delimiter //
        create procedure my_pro3(IN @p_in int)
            begin
                declare _var int;
                set _var = @p_in + 1;
                IF _var=0 THEN
                    insert into `user` values (null,'James',31,'洛杉矶湖人');
                END IF;

                IF @p_in=0 THEN
                    update `user` set `age` = `age` + 1;
                ELSE
                    update `user` set `age` = `age` + 2;
                END IF;
            end;//

★ case-when-then-else-end case ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
    ● 格式
        case @xxx
            when x1 then
                ...
            when x2 then
                ...
            when x3 then
                ...
            else
                ...
        end case;

    # 条件控制语句
    delimiter //
    create procedure pro4(IN p_in varchar(32),IN p_in2 varchar(32))
        begin
            declare _var varchar(32) default "";
            set _var = concat("i like you ,",p_in," !");

            case p_in2
                when 'James' then
                    update `user` set `remark` = _var where `name` = p_in2;
                when 'Bryant' then
                    update `user` set `remark` = 'i am Kobe!' where `name` = p_in2;
                when 'Kris' then
                    update `user` set `remark` = '我是保罗，我爱骂人爱受伤' where `name` = p_in2;
                else
                    insert into `user` values (null,'Messi','30','巴塞罗那','世界最佳球员');
            end case;
        end;//
    delimiter ;

★ while-do...end while  （循环语句）▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
    delimiter //
    create procedure pro5()
        begin
            declare _var int;
            set _var = 0;
            while _var <= 5 do
                case _var
                    when 0 then
                        insert into `user` values (null,'阿里纳斯','35','华盛顿奇才','大将军');
                    when 1 then
                        insert into `user` values (null,'T-Mac','36','Huston Rockies','King-Score');
                    when 2 then
                        insert into `user` values (null,'汤普森','25','金州勇士','佛祖');
                    when 3 then
                        insert into `user` values (null,'格列兹曼',27,'马德里竞技','银球奖');
                    when 4 then
                        insert into `user` values (null,'伊卡尔迪',27,'国际米兰','二弟');
                    when 5 then
                        insert into `user` values (null,'罗伊斯',29,'多特蒙德','小火箭');
                end case;

               set _var = _var + 1;
            end while;
        end;//
    delimiter ;

★ repeat... until (条件) end repeat  （循环语句,相当于do-while）▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
    # 此语句的特点是先执行操作后检查结果
    delimiter //
        create procedure pro6(IN @p_in int)
            begin
                declare _var int default 0;
                set _var=0;
                repeat
                    if _var >= 0 and _var < 6 then
                        insert into `user` values (null,'足球',29,'足球','football');
                    else
                        insert into `user` values (null,'篮球',28,'篮球','basketball');
                    end if;
                    set _var = _var + 1;
                    until _var >= 10
                end repeat;
            end; //
    delimiter ;

★ loop...end loop  ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
    # 需要申明一个loop标识符
    delimiter //
           create procedure pro7()
               begin
                   declare _var int default 0;
                   set _var = 0;
                   loop_flag:loop
                       insert into `user` values (null, concat('loop',_var) ,30,'loop','loop');
                       if _var >= 5 then
                           leave loop_flag;  -- 内部中断
                       end if;
                       set _var = _var + 1;
                   end loop;
               end; //
       delimiter ;



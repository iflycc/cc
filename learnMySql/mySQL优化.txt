① SQL语句查询方面优化
    1.1：对查询进行优化，应尽量避免全表扫描，首先应考虑在where和order by涉及的列上建立索引。
    1.2：尽量避免在where子句中使用 !=或<>操作符，否则引擎将放弃使用索引而进行全表扫描。
    1.3：尽量避免在where子句中对字段进行null的判断，否则会导致引擎放弃使用索引而全表扫描，如：select id from t where num is null. 换言之，即在建表之初，字段不要为null，设置默认值。
    1.4：尽量避免在where子句中使用 or 来连接条件，否则将导致引擎放弃使用索引进行全表扫描，如：select id from t where num = 10 or num = 20，改为：select id from t where num = 10 union all select id from t where num = 20.
    1.5：避免模糊查询使用 `%`开头，可以使用 like `...%`,不要使用 like `%...%`.
    1.6：慎用in和not in，否则会导致全表扫描，如：select id from t where num in (1,2,3); 对于连续的数值，能用用between 就不要用in了，select ... where num between 1 and 3；
    1.7：如果在where子句中使用参数，也会导致全表扫描。因为SQL只有在运行时才会去解析局部变量，单优化程序不能访问计划的选择推迟到运行时；它必须在编译时进行选择。然而，如果在编译时建立访问计划，变量的值还是未知的，因而无法作为索引选择的输入项。如下面语句将进行全表扫描：
        select id from t where num = @num , 改为强制使用索引：select id from t with(index(索引名)) where num=@num;
    1.8：尽量避免在where子句中对字段进行表达式操作，否则会全表扫描。如：select id from t where num / 2 = 100 , 改为： select id from t where num = 100 * 2;
    1.9：尽量避免where子句中使用函数对字段进行操作，否则会全表扫描。
    1.10：不要在where子句中的 “=” [左边]进行函数、算术运算或者其他表达式计算，否则系统将可能无法正确使用索引。
    1.11：使用复合索引时，遵循最左原则，且第一个字段必须用到。
    1.12：不要写一些没有意义的查询消耗系统资源。
    1.13：用exists代替in，select num from a where num in(select num from b),改为：select num from a where exists (select 1 from b where num=a.num);
    1.14：并不是所有的索引都对查询有效，SQL是根据表中的数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不回去利用索引，如一张表有sex，male，female几乎各占一半，那么及时在sex上建了索引也对查询效率起不了作用。
    1.15：索引并不是越多越好，索引可以提升查询效率，但是也降低了insert / update的效率，因为insert或update时有可能会重建索引，所以怎样建索引需要慎重考虑。一个表的索引最好不要超过6个。
    1.16：尽量避免更新聚簇索引（一张表只能有一个聚簇索引），因为聚簇索引的顺序就是表记录的物理存储顺序，一旦该列的值改变将导致整个表记录的顺序调整，消耗大量系统资源。
    1.17：尽量使用数字型字段，而不使用字符串型。因为引擎在处理查询和连接时，会逐个比较字符串中的每个字符，而对数字只需要比较一次。
    1.18：尽可能使用varchar代替char，因为首先变长字段存储空间小，查询小字段搜索效率自然高些。
    1.19：不要使用select * ，用具体字段代替 * 。
    1.20：表变量和临时表,一般情况下使用表变量代替临时表，提高执行速度。

        >>>临时表<<<
             临时表有两种类型：本地表和全局表。在与首次创建或引用表时相同的 SQL Server 实例连接期间，本地临时表只对于创建者是可见的。当用户与 SQL Server 实例断开连接后，将删除本地临时表。全局临时表在创建后对任何用户和任何连接都是可见的，当引用该表的所有用户都与 SQL Server 实例断开连接后，将删除全局临时表。本地临时表的名称都是以“#”为前缀，全局临时表的名称都是以“##”为前缀。
             临时表存储在tempdb中，因此临时表的访问是有可能造成物理IO的，当然在修改时也需要生成日志来确保一致性，同时锁机制也是不可缺少的。
             临时表可以创建索引，也可以定义统计数据，所以可以用数据定义语言(DDL)的声明来阻止临时表添加的限制，约束，并参照完整性，如主键和外键约束。

         >>>表变量<<<
             表变量是变量的一种，表变量也分为本地及全局的两种，本地表变量的名称都是以“@”为前缀，只有在本地当前的用户连接中才可以访问。全局的表变量的名称都 是以“@@”为前缀，一般都是系统的全局变量，像我们常用到的，如@@Error代表错误的号，@@RowCount代表影响的行数。
             表变量存放在内存中，正是因为这一点所有用户访问表变量的时候SQL Server是不需要生成日志。同时变量是不需要考虑其他会话访问的问题，因此也不需要锁机制，对于非常繁忙的系统来说，避免锁的使用可以减少一部分系统负载。[表变量存放在内存是有一定限制的，如果表变量数据量超过阈值，会把内存耗尽，然后使用TempDB的空间，这样主要还是使用硬盘空间，但同时把内存基本耗尽，增加了内存调入调出的机会，反而降低速度]
             表变量另外还有一个限制就是不能创建索引，当然也不存在统计数据的问题，因此在用户访问表变量的时候也就不存在执行计划选择的问题了(也就是以为着编译阶段后就没有优化阶段了)，这一特性有的时候是件好事，而有些时候却会造成一些麻烦。

             -----临时表 vs. 表变量-----
             1.存储位置：临时表是利用了硬盘(tempdb数据库) ，表名变量是占用内存，因此小数据量当然是内存中的表变量更快。当大数据量时，就不能用表变量了，太耗内存了。大数据量时适合用临时表。
             2.性能：不能一概而论，表变量存储数据有个性能临界点，在这个临界点之内，表变量比临时表快，表变量是存储在内存中的。
             3.索引：表变量不支持索引和统计数据，但可以有主键；临时表则可以支持索引和统计数据。
             我们对于较小的临时计算用数据集考虑使用表变量。如果数据集比较大，如果 在代码中用于临时计算，同时这种临时使用永远都是简单的全数据集扫描而不需要考虑什么优化，比如说没有分组或分组很少的聚合(比如说COUNT、SUM、 AVERAGE、MAX等)，也可以考虑使用表变量。使用表变量另外一个考虑因素是应用环境的内存压力，如果代码的运行实例很多，就要特别注意内存变量对 内存的消耗。一般对于大的数据集我们最好使用临时表，同时创建索引。
    1.21：避免频繁的创建和删除临时表，减少系统资源消耗。
    1.22：临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使用导出表。
    1.23：在新建临时表时，如果一次性插入的数据量很大，那么使用select into代替create table，避免产生大量log，以提升速度。
    1.24：如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先truncate再drop table，避免系统表长时间锁表。

        >>>视图<<<
            mysql视图的作用（详细）
            测试表:user有id，name，age，sex字段
            测试表:goods有id，name，price字段
            测试表:ug有id，userid，goodsid字段

            作用一：
                提高了重用性，就像一个函数。如果要频繁获取user的name和goods的name。就应该使用以下sql语言。示例：
                    select a.name as username, b.name as goodsname from user as a, goods as b, ug as c where a.id=c.userid and c.goodsid=b.id;
                但有了视图就不一样了，创建视图other。示例
                    create view other as select a.name as username, b.name as goodsname from user as a, goods as b, ug as c where a.id=c.userid and c.goodsid=b.id;
                创建好视图后，就可以这样获取user的name和goods的name。示例：
                    select * from other;
                以上sql语句，就能获取user的name和goods的name了。
            作用二：
                对数据库重构，却不影响程序的运行。假如因为某种需求，需要将user拆房表usera和表userb，该两张表的结构如下：
                    测试表:usera有id，name，age字段
                    测试表:userb有id，name，sex字段
                这时如果php端使用sql语句：select * from user;那就会提示该表不存在，这时该如何解决呢。解决方案：创建视图。以下sql语句创建视图：
                    create view user as select a.name,a.age,b.sex from usera as a, userb as b where a.name=b.name;
                    以上假设name都是唯一的。此时php端使用sql语句：select * from user;就不会报错什么的。这就实现了更改数据库结构，不更改脚本程序的功能了。
            作用三：
                提高了安全性能。可以对不同的用户，设定不同的视图。例如：某用户只能获取user表的name和age数据，不能获取sex数据。则可以这样创建视图。示例如下：
                    create view other as select a.name, a.age from user as a;
                这样的话，使用sql语句：select * from other; 最多就只能获取name和age的数据，其他的数据就获取不了了。
            作用四：
                让数据更加清晰。想要什么样的数据，就创建什么样的视图。

    1.25：避免使用游标，执行效率较差。
    1.26：在所有的存储过程和触发器的开始处设置SET NOCOUNT ON，结束时设置SET NOCOUNT OFF。
    1.27：避免向客户端返回大量数据。
    1.28：避免大事务操作，提高并发能力。
    1.29：创建索引、优化查询，当mysql认为符合条件的记录在30%以上就不会使用索引了。mysql会先估算，然后决定使不使用索引。


② show processlist and explain
    2.1：获取有问题的SQL
        两种方式获取有问题的SQL语句：
            A. 通过log；
            B. 通过show processlist；

        ▶ log方式
            【慢查询日志】的相关参数：
                ◆ slow_query_log : 是否开启慢查询日志，1开启，0关闭。 —— 打开命令：set global slow_query_log=1;
                ◆ slow_query_log_file : MySql慢查询日志的存储路径，默认会给host_name-slow.log文件。 —— 可自定义：set global slow_query_log_file=/usr/local/mysql/data/my-slow.log
                ◆ long_query_time : 慢查询的阈值，当查询时间大于该时间时，记录到慢查询日志。—— set global long_query_time=3;
                ◆ log_queries_not_using_indexes : 未使用索引的查询也被记录到慢查询日志中（可选项）,调优建议开启。 —— set global log_queries_not_using_indexes=1;
                ◆ log_output : 日志的存储方式。log_output='FILE'表示将日志存入文件，默认值是‘FILE’。log_output='TABLE'表示将日志存入数据库，这样日志会被记录到mysql.slow_log表中。
                               也可以同时开启两种方式：log_output='FILE,TABLE'，记录到表比记录到文件消耗更多的资源，建议选文件。
                ★ 命令行设置在MySql服务器重启之后会失效，若想永久生效，需要配置my.ini文件，再重启MYSQL服务器。

    2.2：explain
          ▶ EXPLAIN列的解释：
             ◆ table：显示这行数据是关于哪张表的。
             ◆ type：重要的一列，显示了连接使用了哪种类型。从最好到最差的连接类型为：const、eq_reg、ref、range、index和ALL。
                     type显示访问类型，是较为重要的指标。结果值从好到坏依次：NULL > system > const > eq_ref > ref > fulltext > reg_or_null > index_merge > unique_subquery > index_subquery > range > index > ALL.
                     一般来说，得保证查询至少达到range级别，最好能达到ref。

                     联接类型。下面给出各种联接类型,按照从最佳类型到最坏类型进行排序:
                        ● NULL:mysql能够在优化阶段分解查询语句，在执行阶段用不着再访问表或索引。例如：在索引列中选取最小值，可以单独查找索引来完成，不需要在执行时访问表。
                            ✔ select min(id) from film;

                        ● system:表仅有一行(=系统表)。这是const联接类型的一个特例。
                            ✔

                        ● const:表最多有一个匹配行,它将在查询开始时被读取。因为仅有一行,在这行的列值可被优化器剩余部分认为是常数。const表很快,因为它们只读取一次!
                            ✔ select * from film where id = 1;

                        ● eq_ref:primary_key或unique_key 索引的所有部分被连接使用，最多只会返回一条符合条件的记录。这可能是在 const 之外最好的联接类型了，简单的 select 查询不会出现这种 type。
                            ✔ select * from film_actor left join film on film_actor.film_id = film.id;

                        ● ref:相比 eq_ref，不使用唯一索引，而是使用普通索引或者唯一性索引的部分前缀，索引要和某个值相比较，可能会找到多个符合条件的行。
                            ✔ SELECT * FROM reg WHERE appid = '307';

                        ● ref_or_null:该联接类型如同ref,但是添加了MySQL可以专门搜索包含NULL值的行。
                            ✔ Select * FROM reg WHERE app_id = '307' or app_id is NULL;

                        ● index_merge:表示使用了索引合并的优化方法。例如下表：id是主键，tenant_id是普通索引。or 的时候没有用 primary key，而是使用了 primary key(id) 和 tenant_id 索引
                            ✔ select * from role where id = 11011 or tenant_id = 8888;

                        ● unique_subquery:该类型替换了下面形式的IN子查询的ref: value IN (SELECT primary_key FROM single_table WHERE some_expr) unique_subquery是一个索引查找函数,可以完全替换子查询,效率更高。
                            ✔

                        ● index_subquery:该联接类型类似于unique_subquery。可以替换IN子查询,但只适合下列形式的子查询中的非唯一索引: value IN (SELECT key_column FROM single_table WHERE some_expr)
                            ✔

                        ● range:范围扫描通常出现在 in(), between ,> ,<, >= 等操作中。使用一个索引来检索给定范围的行。
                            ✔ select * from actor where id > 1;

                        ● index:该联接类型与ALL相同,除了只有索引树被扫描。这通常比ALL快,因为索引文件通常比数据文件小。
                            ✔ select count(*) from film;

                        ● ALL:对于每个来自于先前的表的行组合,进行完整的表扫描。
                            ✔ select * from actor;

             ◆ possible_keys: 显示可能应用在这张表中的索引。可以为相关的域从where子句中选择一个合适的语句。
             ◆ key：实际使用的索引。如果为NULL，则没有使用索引。可使用USE INDEX(index_name)来强制使用一个索引。
             ◆ key_len:使用索引的长度。在不损失精确性的情况下，越短越好。
             ◆ ref：显示索引在哪一列被使用了，如果可能的话，是个常数。
             ◆ rows：扫描的行数。
             ◆ extra：额外信息，最坏的例子是Using temporary 和 Using filesort，意思是Mysql根本不能使用索引，结果检索会很慢。
                ● Distinct:MySQL发现第1个匹配行后,停止为当前的行组合搜索更多的行。
                ● Not exists:MySQL能够对查询进行LEFT JOIN优化,发现1个匹配LEFT JOIN标准的行后,不再为前面的的行组合在该表内检查更多的行。
                ● range checked for each record (index map: #):MySQL没有发现好的可以使用的索引,但发现如果来自前面的表的列值已知,可能部分索引可以使用。
                ● Using filesort:MySQL需要额外的一次传递,以找出如何按排序顺序检索行。
                ● Using index:从只使用索引树中的信息而不需要进一步搜索读取实际的行来检索表中的列信息。
                ● Using temporary:为了解决查询,MySQL需要创建一个临时表来容纳结果。
                ● Using where:WHERE 子句用于限制哪一个行匹配下一个表或发送到客户。
                ● Using sort_union(...), Using union(...), Using intersect(...):这些函数说明如何为index_merge联接类型合并索引扫描。
                ● Using index for group-by:类似于访问表的Using index方式,Using index for group-by表示MySQL发现了一个索引,可以用来查 询GROUP BY或DISTINCT查询的所有列,而不要额外搜索硬盘访问实际的表。

③ MySql主从复制，读写分离
    ▅ 概述：搭设一台Master（主服务器，如IP：192.168.0.104），再搭设两台Slave从服务器。
    ▅ 原理：主服务器（Master）负责网站NonQuery操作，从服务器负责Query操作，用户根据网站功能模块特性固定访问Slave服务器，或者自己写个池或者队列，自由为请求分配从服务器连接。主从服务器利用MySql的二进制日志文件实现数据库同步。二进制日志有主服务器产生，从服务器相应获取并同步数据库。
    ▅ 实现步骤：
        1.在主从服务器上都装上MySql数据库。

        2.配置Master主服务器。
            ☛2.1 在Master MySql上创建一个用户 repl，并允许其他Slave服务器可以通过远程访问Master，通过该用户读取二进制日志，实现数据同步。
                > create user repl; //创建新用户，repl用户必须具有replication slave权限，除此之外没必要添加其他权限，密码为mysql。192.168.0.%，这个配置%是通配符，也可以写固定值。
                > grant replication slave on *.* to 'repl'@'192.168.0.%' identified by 'mysql';
            ☛2.2 找到mysql安装文件夹修改my.ini配置文件，启动log-bin二进制日志

                在[mysqld]下面增加几行代码
                ▶ server-id=1     //给数据库服务的唯一标识，一般为大家设置服务器Ip的末尾号
                ▶ log-bin=master-bin
                ▶ log-bin-index=master-bin.index

            ☛2.3 查看日志,重启mysql
                > show master status;

        3.配置Slave从服务器
            ☛3.1 找到mysql安装文件夹修改my.ini文件，在[mysqld]下面增加配置代码
                > [mysqld]
                > server-id=2
                > relay-log-index=slave-relay-bin.index
                > relay-log=slave-relay-bin

                重启mysql

            ☛3.2 连接master
                > change master to master_host='192.168.0.104';  //Master服务器Ip
                > master_port=3306,
                > master_user='repl',
                > master_password='mysql',
                > master_log_file='master-bin.000001', //Master服务器产生的日志
                > master_log_pos=0;

            ☛3.3 启动Slave
                > start slave;

        4.Slave从服务器
            ☛4.1 找到Mysql安装文件修改my.cnf文件
                > server_id=3
                > relay_log_index=slave-relay-bin.index
                > relay_log=slave-relay-bin

            ☛4.2 ./support-files/mysql.server restart 重启MYSQL服务， ./bin/mysql 进入MYSQL命令窗口
            ☛4.3 连接Master
                > change master to master_host='192.168.0.104'; // Master 服务器IP
                > master_port=3306,
                > master_user='repl',
                > master_password='mysql',
                > master_log_file='master-bin.000001', //Master服务器产生的日志
                > master_log_pos=0;

                配置完成，监听Master mysql日志。